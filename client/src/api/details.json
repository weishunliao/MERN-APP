{
  "1": {
    "post": "I originally wrote and published a version of this article in September 2016. Since then, quite a bit has happened, further cementing my view that these changes are coming and that the implications will be even more substantial. I decided it was time to update this article with some additional\n                    ideas and a few changes.\n                    <br/>\n                    <br/>\n                    As I write this, Uber just announced that it just ordered 24,000 self-driving Volvos. Tesla just\n                    released an electric, long-haul tractor trailer with extraordinary technical specs (range,\n                    performance) and self-driving capabilities (UPS just preordered 125!). And, Tesla just announced\n                    what will probably be the quickest production car ever made — perhaps the fastest. It will go zero\n                    to sixty in about the time it takes you to read zero to sixty. And, of course, it will be able to\n                    drive itself. The future is quickly becoming now. Google just ordered thousands of Chryslers for its\n                    self-driving fleet (that are already on the roads in AZ).\n                    <br/>\n                    <br/>\n                    In September of 2016, Uber had just rolled out its first self-driving taxis in Pittsburgh, Tesla and\n                    Mercedes were rolling out limited self-driving capabilities and cities around the world were\n                    negotiating with companies who want to bring self-driving cars and trucks to their cities. Since\n                    then, all of the major car companies have announced significant steps towards mostly or entirely\n                    electric vehicles, more investments have been made in autonomous vehicles, driverless trucks now\n                    seem to be leading rather than following in terms of the first large scale implementations and\n                    there’ve been a few more incidents (i.e. accidents).",
    "name": "Geoff Nesnow",
    "title": "73 Mind-Blowing Implications of Driverless Cars and Trucks",
    "image": "https://miro.medium.com/max/1600/1*jZLOWAI_M_f4Wo1WEsMZgw.jpeg"
  },
  "2": {
    "post": "Many people have become interested in learning to code in recent years.\n\nThey either find their way into programming through online courses, or through offline meet ups, or are just simply trying to give it a shot.\n\nWebsites like code.org, codecademy and freeCodeCamp are becoming more and more popular. There are a huge number of coding courses out on the web, and also available on YouTube.\n\nBut coding isn’t easy. Here are some of the challenges we all face when learning to code.\n\n1. Finding the “right” amount of time to code everyday.\nIf you are learning to code by yourself, chances are you have other responsibilities in life.\n\nYou could have a part time job, or a full time job, or you can be a stay at home parent. The point is, everyone is busy in this life. So how do you find the time to code everyday?\n\nSome people may say: “Well, if you are dedicated enough, you can always find time.” True. I agree with that.\n\nSo then the question becomes: “How much time should you dedicate everyday to code? If I can only get half an hour per day, does that still count?”\n\nThis is the question only you yourself can answer. It is very hard to estimate how many hours you should code each day. Some people suggest to keep it short and sweet. 15 minutes is good enough.\n\nOn the other side of the spectrum, I’ve also heard people got into the development field within a year or so by coding 9 or 10 hours a day. If you want some motivation you can give that thread a look.\n\nThe bottom line is this: only you yourself know how much you can code everyday, and making it a habit of doing it, without getting burnt out. The last part is really important. freeCodeCamp founder Quincy Larson once said on his twitter feed:\n\n“It is not about your daily progress, it is about progress daily.”\nHere is a video about a senior developer who has been in the tech field for decades talking about how much programming programmers do each day while they are at work.\n\nIt is not gonna be the golden standard, but it will give you an idea about how to set yourself a realistic, and most importantly, sustainable plan when it comes to learning to code everyday.",
    "name": "Xiang Zhou",
    "title": "The most difficult things about learning to code by yourself — and how to tackle them",
    "image": "https://cdn-media-1.freecodecamp.org/images/0*yLaEVLIg1dFOUE5o"
  },
  "3": {
    "post": "The path of the self-taught developer is tough and clouded with uncertainty. There is no straight line from newbie to career programmer. Because of this, I believe all self-taught developers have a unique story to tell.\n\nIn this article, I’ve shared a few stories and lessons learned from my time teaching myself programming. Hopefully reading about my experiences will help you reflect on your past and motivate you moving forward.\n\nFocus on the process\nWhen I first started learning to program, I never had the intention of making a career out of it. I just wanted to make a specific app.\n\nMy journey started when I was a senior in college. I just finished Richard Branson’s book Losing my Virginity, and I was probably reading too much TechCrunch. I was pumped up full of entrepreneurial energy. I was constantly reading about how college kids were receiving massive amounts of investment for their mobile app ideas. I thought I could be one of those people.\n\nOne day, while walking in-between classes, an app idea hit me. The specifics of the app aren’t important. The point is, the idea was unique and had a lot of growth potential (at least in my mind).\n\nI was convinced that I’d found the next big thing. I was consumed by the idea and stopped paying attention to lectures. My excitement for the idea quickly grew to the point where I felt the need to take action.\n\nThere was one big problem. My idea was a mobile app and I didn’t know anyone who could build mobile apps.\n\nSo I thought what the hell. How hard could programming be? I was losing interest in my major and I was spending a lot of time playing Xbox. I could allocate some of my free time towards building this mobile app.\n\nSometimes being naive helps you take action when you normally wouldn’t.\n\nWhat we had was a college student with no programming, business, or design experience trying to learn Android so he could build a complex app. I guess that’s what you get when you mix a big idea with the Silicon Valley hype machine.\n\nI wish I could tell you things went well from here. ?\n\nI bought a few books on Android development and spent many hours in my room trying to duct-tape this app together. I didn’t care how the app worked. I just wanted a finished product, if that meant copying and pasting code from any source I could find.\n\nI thought I could get away with learning very little about programming. I became too focused on the end result. The light at the end of the tunnel kept driving me forward.\n\nTime went on and the app turned into a Frankenstein of copy and pasted code. The app didn’t have many features and it barely ran without crashing.\n\nIt wasn’t until I accidentally got into a Computer Science class that I realized that maybe I should focus more on learning. My inability to program lead me to abandon my initial app idea. I had come to the realization that I wasn’t going to make the next big thing, at least not yet.\n\nLuckily, over time I corrected my behavior and took learning more seriously. I started to enjoy programming and eventually started a career as a software developer.\n\nTake Away\nHaving a big idea is great, but beware when the idea becomes all-consuming. It’s a powerful force and it consumed me for a long time. It put my focus on the end result rather than the process of getting there.\n\nIt’s important to remember that learning anything big, like programming, requires many small steps. The only way you are going to learn anything is by focusing on and mastering each individual step.\n\nWhen you get too focused on the end result, you start taking shortcuts. Shortcuts might lead you to short-term progress but in the long run, your lack of knowledge will always catch up on you. Learning new things is like building a house. You start with the foundation and build up. If the foundation is faulty the whole thing will crumble down sooner or later.\n\nSometimes building a strong foundation requires you to slow down. There’s no shame in going slow. The people who understand the basics the first time will end up going ahead of the people who have to go back and relearn them.\n\nI was a perfect example. From the outside, it might’ve looked like I was a programming whiz kid. In reality, I couldn’t build an app to save my life.\n\nThere’s an old Chinese proverb that goes:\n\nIt is better to take many small steps in the right direction than to make a great leap forward only to stumble backward.\nFocus on the process each day and you will surprise yourself with how much progress you make.\n\nStack Overflow is awesome (and dangerous)\nAs I was building the app, Stack Overflow became my best friend. Anytime I got stuck I would try to craft together a question to ask the Stack Overflow community. I averaged a few questions a week.\n\nNot only would I post questions, I would treat the answers on Stack Overflow as Gospel. I would spend a crazy amount of time scouring the site to try to find an exact chunk of code that would fix my problem. Once I found the answer, I would copy and paste it right into my codebase and try to make it work. I spent little time trying to understand. I made brute-force trial and error a new art form.\n\nThis process went on for a while, until eventually, I wised up and realized the flaws of this approach.\n\nTake Away\nCopying and pasting is a terrible way to learn how to code.\n\nStack Overflow is a blessing and a curse. It’s great at helping you solve and fix problems. But it also can become a crutch that you always depend on if you aren’t careful.\n\nSometimes, the website is too good at solving your problems. It creates a false sense of confidence that will only lead to more headaches down the road.\n\nIt’s impossible to learn an",
    "name": "Victor Cassone",
    "title": "Lessons learned from my journey as a self-taught developer",
    "image": "https://cdn-media-1.freecodecamp.org/images/1*DAP7LzvAGemiogLG4lSnWA.png"
  },
  "4": {
    "post": "No matter whether you are a code newbie or a seasoned developer, code editor is an imperative part of your work. The problem, especially if you are a beginner, is that there are tons of choices for IDEs. And many of them share similar features, functionalities, and even UI. As a result, choosing the right IDE might actually take more time and effort that you thought.\n\nIf your question right now is: “which code editor should I start with?” then I would reply: “It depends, my friend.” Choosing a particular IDE significantly depends on a few factors: what type of developer you are, what kinds of environments you mostly work with, or whether you have an exclusive built-in feature that you absolutely need to get jobs done.\n\nI would say that the way to choose one is to try and explore them all, and then pick what suits you best.\n\nChoosing the right code editor for you\nAs most newbies do, I started with Notepad++ as my first code editor. This is perhaps one of the simplest IDEs that I’ve tried. Later on, as my needs started to require more advanced functionality from the editor, I tried out Brackets, Atom, then Visual Studio Code.\n\nAfter a decent amount of experimenting, VSCode became my favorite. It impressed me with its modern UI, a wide availability of extensions, as well as great features such as built-in Git and terminal. The main purpose of this blog is not to compare different IDEs, but to discuss my experience with VSCode. So in this post, I will:\n\nShow a brief introduction to VSCode\nIntroduce particular themes I’ve installed\nDiscuss helpful extensions I use\nHow I leverage VSCode’s features to enhance my workflow.\nLet’s kick it off!\n\nBut first, what is VSCode anyway?\nVisual Studio Code (VSCode) is a source code editor developed by Microsoft that can be run on Windows, macOS, and Linux. It is free, open-source, and provides support for debugging as well as built-in Git version control, syntax highlights, snippets, and so on. The UI of VSCode is highly customizable, as users can switch to different themes, keyboard shortcuts, and preferences.\n\nVSCode was originally announced in 2015 as an open-source project hosted on GitHub before releasing to the web a year later. Since then, Microsoft’s code editor has been gaining popularity among developers.\n\nIn the Stack Overflow 2018 Developer Survey, VSCode was ranked as the most popular development environment with around 35% out of over 100,000 respondents saying they use it. More stunningly, this figure is around 39% in the web development field.\n\nAnd with monthly updates, users can expect to enjoy an even better experience — bug fixes, stability, and performance boosts are frequently pushed.\n\nTheme: Color and Font",
    "name": "Vinh Le",
    "title": "An overview of Visual Studio Code for front-end developers",
    "image": "https://cdn-media-1.freecodecamp.org/images/1*fEUJfqoKCP2YsEHBfXUVBw.jpeg"
  }
}